
<?component error="true"?> <!-- <?component error="true"?> allows line numbers to display on error -->

<scriptlet> <!--                   

' Windows&reg Script Component <code> Includer.wsc </code>
'
'    <h5> Purpose </h5>

'        A dependency management tool, primarily intended to be used in a class file, to allow the class to manage its own dependencies.
'        Can be used in a .wsf or .vbs script.
'
'    <h5> How it works </h5>
'
'        The Read method returns the contents of a .vbs class file -- or any other text file.
'
'    <h5> Usage example </h5>
'
''        With CreateObject("includer")
''            ExecuteGlobal(.read("WMIUtility.vbs")) '.vbs may be omitted
''            ExecuteGlobal(.read("VBSNatives"))
''        End With
'
'        Or just <code> Execute(.read("VBSNatives"))</code> if the statement already has global scope
'
'        Within a Class block, it is recommended to add error-handling code to the above, in case a calling script includes two or more classes that share a dependency:
'
''        With CreateObject("includer") : On Error Resume Next
''            ExecuteGlobal(.read("WMIUtility"))
''            ExecuteGlobal(.read("VBSNatives"))
''        End With : On Error Goto 0
'
'        Relative paths may be used and are relative to this scriptlet's location

'
'    <h5> Registration </h5>
'
'        Windows&reg Script Component files must be registered. Right clicking <code> Includer.wsc </code> and selecting Register probably will not work.
'
'        Instead, 
'        1) run the Setup.vbs in the project folder, or
'        2) run the following command in a command window with elevated privileges
'
''            regsvr32 &ltabsolute\path\to\the\file&gt\includer.wsc
'           
'''' 
-->
    <registration
        description="VBScript includer scriptlet by Karl Oswald"
        progid="includer"
        classid="{ADCEC089-30DE-11D7-86BF-00606744568C}">
    </registration>

    <public>
        <method name="read" /> <!-- return the contents of a text file (.vbs is assumed if not specified); relative path allowed (relative to this .wsc file) -->
        <method name="SetFormat" /> <!-- includer.c.tbAscii, .c.tbUnicode, or .c.tbSystemDefault -->
        <property name="c" /> <!-- get text stream constants, iForReading, iForAppending, iForWriting, bCreateNew, bDontCreateNew, plus SetFormat parameters as above -->
        <property name="Version" internalname="sVersion" />
        <property name="UUID" internalname="sWscID" />
    </public>

    <script language="VBScript" src="StreamConstants.vbs" />
    <script language="VBScript" src="RegistryUtility.vbs" />
    <script language="VBScript" src="VBSNatives.vbs" />
    <script language="VBScript">

        Option Explicit 'Require the declaration of variables

        Const sVersion = "0.0.0"
        Const sWscID = "{ADCEC089-30DE-11D7-86BF-00606744568C}" 'must match the classid above

        Dim n, oStreamConstants, StreamFormat
        Dim relativePath, savedCurrentDirectory
        
        InitializeMembers
        
        Function c : Set c = oStreamConstants : End Function
        
        Sub SetFormat(newFormat) : StreamFormat = newFormat : End Sub
        
        Private Sub InitializeMembers
            Set n = New VBSNatives 'objects native to VBScript
            Set oStreamConstants = New StreamConstants
            Dim reg : Set reg = New RegistryUtility

            'set the path against which relative paths will be referenced, i.e. the folder containing this scriptlet

            Dim subKey : subKey = "Software\Classes\CLSID\" & sWscID & "\ScriptletURL"
            Dim thisFile : thisFile = reg.GetStringValue(reg.HKLM, subKey, "") 'get path to this scriptlet from the registry
            thisFile = Replace(thisFile, "file:///", "") 'remove superfluous string
            relativePath = n.fso.GetParentFolderName(thisFile)
            SetFormat c.tbAscii 
        End Sub
        
        'Function Read
        'Parameter: a file
        'Return the contents of a file
        'Remark: The file may be specified as a relative path, relative to the folder where this .wsc file resides. The file name extension may be omitted for .vbs files.
        
        Function Read(file)
            
            'Expect Ascii and Unicode file formats to be mixed together in the script library...
            
            'Read the requested file and attempt to execute it, then check
            'if there was an error; if so, try another stream format, e.g. Unicode.
            'Executing well-encapsulated trusted code here should have little impact, 
            'and the calling script will still need to do an Execute or ExecuteGlobal.
            
            On Error Resume Next
                Read = PrivateRead(file)
                Execute(Read)
                If Err Then 
                    ToggleFormat 
                Else
                    Exit Function
                End If
            Err.Clear
                Read = PrivateRead(file)
                Execute(Read)
                If Err Then 
                    ToggleFormat 
                Else 
                    Exit Function
                End If
            Err.Clear
                Read = PrivateRead(file)
            On Error Goto 0
        End Function
        
        Private Sub ToggleFormat
            If StreamFormat = c.tbAscii Then
                SetFormat c.tbUnicode 
            ElseIf StreamFormat = c.tbUnicode Then
                SetFormat c.tbSystemDefault
            ElseIf StreamFormat = c.tbSystemDefault Then
                SetFormat c.tbAscii
            End If
        End Sub

        'return the contents of a file

        Private Function PrivateRead(file)
            file = Resolve(file)
            If Not n.fso.FileExists(file) Then
                file = file & ".vbs" 'add the .vbs file extension and try again
                If Not n.fso.FileExists(file) Then
                    Read = "MsgBox ""Couldn't find file "" & """ & file & """, vbExclamation"
                    Exit Function
                End If
            End If
            Dim stream : Set stream = n.fso.OpenTextFile(file, c.iForReading, c.bDontCreateNew, StreamFormat)
            PrivateRead = stream.ReadAll
            stream.Close
            Set stream = Nothing
        End Function

        'resolve a relative path ("../lib/WMI.vbs") or no path => expanded, absolute path

        Private Function Resolve(path)
            SaveCurrentDirectory
            n.sh.CurrentDirectory = relativePath  'set the reference folder relative paths
            
            Resolve = n.fso.GetAbsolutePathName(n.sh.ExpandEnvironmentStrings(path))
            RestoreCurrentDirectory
        End Function

        Private Sub SaveCurrentDirectory : savedCurrentDirectory = n.sh.CurrentDirectory : End Sub
        Private Sub RestoreCurrentDirectory : n.sh.CurrentDirectory = savedCurrentDirectory : End Sub
        
    </script>
</scriptlet>
