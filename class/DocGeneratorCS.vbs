' DocGeneratorCS class

' Generates html documentation for C# code from compiler-generated xml files.
' Four base tags are supported: summary, parameters, returns, and remarks.
' Between these tags, text and html can be inserted.

Class DocGeneratorCS

    'Property XmlFolder
    'Parameter: folder
    'Returns: N/A
    'Remarks: Required. Sets the folder containing the .xml files autogenerated by the C# compiler, csc.exe.
    Property Let XmlFolder(newFolder)
        xmlFolder_ = newFolder
        ValidateXmlFolder
    End Property

    'Property OutputFile
    'Parameters: a filespec
    'Returns: N/A
    'Remarks: Required. Sets the html output file. Older versions, if any, will be overwritten. Relative paths and environment variables are supported.
    Property Let OutputFile(newValue) : htmlFile = sh.ExpandEnvironmentStrings(newValue) : End Property

    'Method Generate
    'Remarks: Generates html documentation based on the .xml files generated by the C# compiler.
    Sub Generate
        ValidateXmlFolder
        WriteHtmlHeader
        Dim file
        For Each file In fso.GetFolder(xmlFolder_).Files
            GenerateTable file.Path
        Next
        WriteHtmlFooter
    End Sub

    'Method View
    'Remarks: Opens the documentation file in the default viewer.
    Sub View : sh.Run """" & htmlFile & """" : End Sub

    Sub GenerateTable(xmlFile)
        If "xml" <> LCase(fso.GetExtensionName(xmlFile)) Then Exit Sub
        xml.Load xmlFile
        If xml.ParseError.ErrorCode Then Err.Raise 1,, xml.ParseError.Reason & vbLf & "File: " & xmlFile
        html.WriteLine "<h2>" & fso.GetBaseName(xmlFile) & "</h2>"
        html.WriteLine "<table>"
        html.WriteLine "<tr><th> Member name </th><th> Kind </th><th> Member of </th><th> Parameters </th><th> Returns </th><th> Remarks </th><th> Namespace </th></tr>"
        Dim member, members
        Set members = xml.getElementsByTagName("member")
        For Each member In members
            GenerateRow member
        Next
        html.WriteLine "</table>"
    End Sub
    Sub GenerateRow(member)
        Dim info : Set info = GetMemberInfo(member)
        If Len(Trim(info.Summary & info.Remarks)) < 3 And 0 = Len(Trim(info.Returns)) Or "#ctor" = info.Name Then Exit Sub
        html.WriteLine "<tr>"
        html.WriteLine f(Array("<td> %s </td>", info.Name))
        html.WriteLine f(Array("<td> %s </td>", info.MemberType))
        If "Type" = info.MemberType Then
            html.WriteLine "<td> </td>"
        Else
            html.WriteLine f(Array("<td> %s </td>", info.MemberTypeName))
        End If
        html.WriteLine f(Array("<td> %s </td>", info.Parameters))
        html.WriteLine f(Array("<td> %s </td>", info.Returns))
        html.WriteLine f(Array("<td> %s </td>", info.Summary & " " & info.Remarks))
        html.WriteLine f(Array("<td> %s </td>", info.NamespaceName))
        html.WriteLine "</tr>"
    End Sub
    Function GetMemberInfo(member)
        Dim info : Set info = New MemberInfo
        Dim attribute, rawName
        For Each attribute In member.attributes
            If "name" = attribute.name Then rawName = attribute.text
        Next
        info.MemberType = GetType(rawName)
        info.NamespaceName = GetNamespaceName(rawName)
        info.MemberTypeName = GetTypeName(rawName)
        If "Type" = info.MemberType Then
            info.Name = info.MemberTypeName
        Else info.Name = GetName(rawName)
        End If
        Set GetMemberInfo = info
        If Not member.hasChildNodes Then Exit Function
        Dim child
        For Each child In member.childNodes
            Select case child.nodeName
            Case "summary" info.Summary = innerHTML(child)
            Case "remarks"  info.Remarks = innerHTML(child)
            Case "parameters"  info.Parameters = innerHTML(child)
            Case "returns" info.Returns = innerHTML(child)
            End Select
        Next
        Set GetMemberInfo = info
    End Function
    Function innerHTML(child)
        Dim str, tag : str = child.xml : tag = child.nodeName
        str = Replace(str, f(Array("<%s>", tag)), "")
        innerHTML = Trim(Replace(str, f(Array("</%s>", tag)), ""))
    End Function
    Function GetType(rawName) 'ByRef by default
        Select Case Left(rawName, 1)
        Case "T" : GetType = "Type"
        Case "P" : GetType = "Property"
        Case "M" : GetType = "Method"
        Case "F" : GetType = "Field"
        End Select
        rawName = Right(rawName, Len(rawName) - 2)
    End Function
    Function GetNamespaceName(rawName) 'ByRef by default
        GetNamespaceName = Left(rawName, InStr(rawName, ".") - 1)
        rawName = Right(rawName, Len(rawName) - Len(GetNamespaceName) - 1)
    End Function
    Function GetTypeName(rawName)
        If InStr(rawName, ".") Then
            GetTypeName = Left(rawName, InStr(rawName, ".") - 1)
            rawName = Right(rawName, Len(rawName) - Len(GetTypeName) - 1)
        Else GetTypeName = rawName
            rawName = ""
        End If
    End Function
    Function GetName(rawName)
        If InStr(rawName, "(") Then
            GetName = Left(rawName, InStr(rawName, "(") - 1)
        Else GetName = rawName
        End If
    End Function
    Sub WriteHtmlHeader
        On Error Resume Next
            Set html = fso.OpenTextFile(htmlFile, 2, True)
            If Err Then MsgBox "Use the OutputFile property to set the output file.", vbInformation, "DocGeneratorCS class" : Class_Terminate : WScript.Quit
        On Error Goto 0
        html.WriteLine "<!doctype html>"
        html.WriteLine "<html>"
        html.WriteLine "<head>"
        html.WriteLine "<style> body { font-family: sans-serif; } th { text-align: left; } tr:nth-child(even) { background-color: #eee; } table { border-collapse: collapse; } td, th { padding-left: 10px; padding-right: 10px; } .red { color: #700; } .green { color: #070; } tt, pre { font-size: larger; } </style>"
        html.WriteLine "</head>"
        html.WriteLine "<body>"
        html.WriteLine "<h1> C# Classes Documentation </h1>"
    End Sub
    Sub WriteHtmlFooter
        html.WriteLine "</body>"
        html.WriteLine "</html>"
    End Sub
    Sub ValidateXmlFolder
        If Not fso.FolderExists(xmlFolder_) Then
            Err.Raise 1, "DocGeneratorCS.ValidateXmlFolder", "Set the XmlFolder property to the location of the .xml files."
        End If
    End Sub
    
    Private xmlFolder_
    Private xml, html
    Private xmlFiles, xmlFile, htmlFile
    Private fso, sh, f
    Sub Class_Initialize
        Set fso = CreateObject("Scripting.FileSystemObject")
        Set sh = CreateObject("WScript.Shell")
        Set f = CreateObject("VBScripting.StringFormatter")
        Set xml = CreateObject("MSXML2.DomDocument.6.0")
        xml.Async = False
    End Sub
    Sub Class_Terminate
        Set xml = Nothing
        On Error Resume Next
            html.Close
        On Error Goto 0
        Set html = Nothing
        Set fso = Nothing
        Set sh = Nothing
        Set f = Nothing
    End Sub
End Class

Class MemberInfo
    Public MemberType 'Type, Method, Property, Field
    Public NamespaceName
    Public MemberTypeName 'class name, interface name ¿or struct name?
    Public Name 'for types, same as MemberTypeName
    Public Summary
    Public Parameters
    Public Returns
    Public Remarks
End Class