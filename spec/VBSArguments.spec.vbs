
'test VBSArguments.vbs

With CreateObject("includer")
    Execute(.read("VBSArguments"))
    Execute(.read("TestingFramework"))
    Execute(.read("TextStreamer"))
End With
Dim a : Set a = New VBSArguments
Dim ts : Set ts = New TextStreamer

With New TestingFramework

    .describe "VBSArguments class"

        Dim script : script = ts.GetFile & ".vbs"
        ts.SetFile script
        Dim stream : Set stream = ts.Open

        stream.WriteLine "'Autogenerated script: writes command-line arguments to StdOut"
        stream.WriteLine "With CreateObject(""includer"")"
        stream.WriteLine "    Execute(.read(""VBSArguments""))"
        stream.WriteLine "End With"
        stream.WriteLine "Set va = New VBSArguments"
        stream.WriteLine "WScript.StdOut.WriteLine va.GetArgumentsString"
        stream.Close
        Dim arg, args
        Dim pipe

    .it "should get a string of command-line arguments with spaces"

        args = """Some File.txt"" ""Some File2.txt"""
        Set pipe = ts.sh.Exec("%ComSpec% /c cscript //nologo " & script & " " & args)

        .AssertEqual pipe.StdOut.ReadLine, " " & args

    .it "should get a single command-line argument with spaces"

        arg = """Some File.txt"""
        Set pipe = ts.sh.Exec("%ComSpec% /c cscript //nologo " & script & " " & arg)

        .AssertEqual pipe.StdOut.ReadLine, " " & arg

    .it "should get a single command-line argument without spaces"

        arg = """SomeFile.txt"""
        Set pipe = ts.sh.Exec("%ComSpec% /c cscript //nologo " & script & " " & arg)

        .AssertEqual pipe.StdOut.ReadLine, " " & arg

    .it "should get a single command-line argument without spaces #2"

        'Note: each argument is wrapped in double quotes,
        'regardless of whether it contains spaces

        arg = "SomeFile.txt"
        Set pipe = ts.sh.Exec("%ComSpec% /c cscript //nologo " & script & " " & arg)

        .AssertEqual pipe.StdOut.ReadLine, " """ & arg & """"

    Set pipe = Nothing 'garbage collection
    ts.Delete 'delete the test script

End With
